{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e246629d-4c57-4412-8436-893ad8e282b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Requête 1:\n",
    "q1=pandas.read_sql_query(\"\"\"select c.customerNumber\n",
    "from Customers as c left join Orders as o on c.customerNumber=o.customerNumber \n",
    "where o.orderNumber is null;\"\"\", conn)\n",
    "print(q1)\n",
    "Résultat: 23 observations\n",
    "\n",
    "#Requête 2 : Pour chaque employé, le nombre de clients, le nombre de commandes et le montant total de celles-ci ; \n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT e.employeeNumber, e.firstName, e.lastName, \n",
    "       COUNT(DISTINCT c.customerNumber) AS nb_clients,\n",
    "       COUNT(o.orderNumber) AS nb_commandes,\n",
    "       SUM(p.amount) AS mt_total\n",
    "FROM Employees e\n",
    "LEFT JOIN Customers c ON e.employeeNumber = c.salesRepEmployeeNumber\n",
    "LEFT JOIN Orders o ON c.customerNumber = o.customerNumber\n",
    "LEFT JOIN Payments p ON o.customerNumber = p.customerNumber\n",
    "GROUP BY e.employeeNumber, e.firstName, e.lastName;\n",
    "\"\"\", conn)\n",
    "\n",
    "#Requête 3:\n",
    "\n",
    "# 3. Pour chaque bureau (nombre de clients, nombre de commandes et montant total), avec en plus le nombre de clients d’un pays différent, s’il y en a ;\n",
    "\n",
    "q3=pandas.read_sql_query(\"\"\"\n",
    "SELECT count(distinct c.customerNumber) as NbCustomers, count(distinct ord.orderNumber) as NbOrder, sum(p.amount) as TtAmount\n",
    "FROM Offices o LEFT JOIN Employees e on o.officeCode=e.officeCode\n",
    "LEFT JOIN Customers c on c.salesRepEmployeeNumber=e.employeeNumber\n",
    "LEFT JOIN Orders ord on ord.customerNumber=c.customerNumber\n",
    "LEFT JOIN Payments p on ord.customerNumber = p.customerNumber\n",
    "GROUP BY o.officeCode\n",
    ";\"\"\", conn)\n",
    "print(q3)\n",
    "\n",
    "\n",
    "#Requête 4 : Pour chaque produit, donner le nombre de commandes, \n",
    "#la quantité totale commandée, et le nombre de clients différents ; \n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT p.productCode, p.productName,\n",
    "        COUNT(DISTINCT od.orderNumber) AS nb_commandes,\n",
    "        SUM(od.orderNumber) AS qt_totale,\n",
    "        COUNT(DISTINCT c.customerNumber) AS nb_clients\n",
    "FROM Products p\n",
    "JOIN OrderDetails od ON p.productCode = od.productCode\n",
    "JOIN Orders o ON od.orderNumber = o.orderNumber\n",
    "JOIN Customers c ON c.customerNumber = o.customerNumber\n",
    "GROUP BY p.productCode, p.productName\n",
    "ORDER BY p.productCode;                          \n",
    "\"\"\", conn)\n",
    "\n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT pr.productCode, pr.productName, count(distinct ord.orderNumber) as NbOrder, \n",
    "sum(od.quantityOrdered) as TtQuantity, count(distinct ord.customerNumber) as NbDistinctCustomers\n",
    "FROM Products pr LEFT JOIN OrderDetails od on pr.productCode=od.productCode\n",
    "LEFT JOIN Orders Ord on od.orderNumber=ord.orderNumber\n",
    "GROUP BY 1, 2\n",
    ";\"\"\", conn)\n",
    "\n",
    "\n",
    "#Requête 5:\n",
    "\n",
    "#Requête 6 : On veut la table de contingence du nombre de commande entre la ligne de produits et le pays du client ;\n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT p.productLine, c.country, COUNT(o.orderNumber) AS nb_commandes\n",
    "FROM Products p\n",
    "JOIN OrderDetails od ON p.productCode = od.productCode\n",
    "JOIN Orders o ON od.orderNumber = o.orderNumber\n",
    "JOIN Customers c ON o.customerNumber = c.customerNumber\n",
    "GROUP BY p.productLine, c.country\n",
    "ORDER BY p.productLine, c.country;                      \n",
    "\"\"\", conn)\n",
    "\n",
    "#Requête 7:\n",
    "\n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT p.productLine as LigneProduit, c.country, count(distinct o.ordernumber), sum(pa.amount)\n",
    "FROM Payments pa left join Customers c on pa.customernumber=c.customernumber\n",
    "LEFT JOIN Orders o on c.customerNumber=o.customernumber\n",
    "LEFT JOIN OrderDetails od on o.orderNumber=od.ordernumber\n",
    "LEFT JOIN Products p on od.productcode=p.productcode\n",
    "group by 1, 2\n",
    "order by 3\n",
    ";\"\"\", conn)\n",
    "\n",
    "\n",
    "#Requête 8 : Donner les 10 produits pour lesquels la marge moyenne est la plus importante (cf buyPrice et priceEach) ; \n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT p.productCode, p.productName, \n",
    "       AVG(od.priceEach - p.buyPrice) AS marge_moy\n",
    "FROM Products p\n",
    "JOIN OrderDetails od ON p.productCode = od.productCode\n",
    "GROUP BY p.productCode, p.productName\n",
    "ORDER BY marge_moy DESC\n",
    "LIMIT 10;\n",
    "\"\"\", conn)\n",
    "\n",
    "#Requête 9:\n",
    "\n",
    "q9=pandas.read_sql_query(\"\"\"\n",
    "SELECT P.productCode, C.customerNumber, C.customerName\n",
    "FROM Products as P left join OrderDetails as OD on P.productCode=OD.productCode left join Orders as O on OD.orderNumber=O.orderNumber\n",
    "left join Customers as C on C.customerNumber=O.customerNumber\n",
    "WHERE P.buyPrice > OD.priceEach\n",
    "\"\"\", conn)\n",
    "print(q9)\n",
    "\n",
    "\n",
    "#Requête 10 : Lister les clients pour lesquels le montant total payé est inférieur aux montants totaux des achats ; \n",
    "#Il n'y en a pas.\n",
    "\n",
    "#Supérieur : \n",
    "pandas.read_sql_query(\"\"\"\n",
    "SELECT c.customerNumber, c.customerName, \n",
    "       SUM(p.amount) AS mt_tot_paye,\n",
    "       SUM(od.priceEach * od.quantityOrdered) AS mt_tot_achats\n",
    "FROM Customers c\n",
    "JOIN Payments p ON c.customerNumber = p.customerNumber\n",
    "JOIN Orders o ON c.customerNumber = o.customerNumber\n",
    "JOIN OrderDetails od ON o.orderNumber = od.orderNumber\n",
    "GROUP BY c.customerNumber, c.customerName\n",
    "HAVING mt_tot_paye > mt_tot_achats\n",
    "ORDER BY c.customerNumber;\n",
    "\"\"\", conn)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "",
   "name": ""
  },
  "language_info": {
   "name": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
